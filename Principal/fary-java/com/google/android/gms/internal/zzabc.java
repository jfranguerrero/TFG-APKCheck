package com.google.android.gms.internal;

import android.support.annotation.NonNull;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResult.zza;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.TransformedResult;
import java.util.concurrent.TimeUnit;

public final class zzabc<R extends Result>
  extends OptionalPendingResult<R>
{
  private final zzzx<R> zzaBC;
  
  public zzabc(PendingResult<R> paramPendingResult)
  {
    if (!(paramPendingResult instanceof zzzx)) {
      throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
    }
    zzaBC = ((zzzx)paramPendingResult);
  }
  
  public R await()
  {
    return zzaBC.await();
  }
  
  public R await(long paramLong, TimeUnit paramTimeUnit)
  {
    return zzaBC.await(paramLong, paramTimeUnit);
  }
  
  public void cancel()
  {
    zzaBC.cancel();
  }
  
  public R get()
  {
    if (isDone()) {
      return await(0L, TimeUnit.MILLISECONDS);
    }
    throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
  }
  
  public boolean isCanceled()
  {
    return zzaBC.isCanceled();
  }
  
  public boolean isDone()
  {
    return zzaBC.isReady();
  }
  
  public void setResultCallback(ResultCallback<? super R> paramResultCallback)
  {
    zzaBC.setResultCallback(paramResultCallback);
  }
  
  public void setResultCallback(ResultCallback<? super R> paramResultCallback, long paramLong, TimeUnit paramTimeUnit)
  {
    zzaBC.setResultCallback(paramResultCallback, paramLong, paramTimeUnit);
  }
  
  @NonNull
  public <S extends Result> TransformedResult<S> then(@NonNull ResultTransform<? super R, ? extends S> paramResultTransform)
  {
    return zzaBC.then(paramResultTransform);
  }
  
  public void zza(PendingResult.zza paramZza)
  {
    zzaBC.zza(paramZza);
  }
  
  public Integer zzuR()
  {
    return zzaBC.zzuR();
  }
}
